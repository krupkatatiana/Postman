{
	"info": {
		"_postman_id": "b05b03cc-3580-403b-ac69-708c56467e6e",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20969064"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*Статус код 200*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"/*Проверить, что в body приходит правильный string.*/\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/* 2. Статус код 200*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/* 3. Спарсить response body в json*/\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"/* 4. Проверить, что name в ответе равно name s request (name вбить руками.)*/\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"        pm.expect(resp_name).to.eql(\"Tanya\");\r",
							"});\r",
							"\r",
							"/* 5. Проверить, что age в ответе равно age s request (age вбить руками.)*/\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"        pm.expect(resp_age).to.eql(\"38\");\r",
							"});\r",
							"\r",
							"/* 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)*/\r",
							"let resp_salary = jsonData.salary;\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"        pm.expect(resp_salary).to.eql(1000);\r",
							"});\r",
							"\r",
							"/* 7. Спарсить request.*/\r",
							"let req = request.data;\r",
							"\r",
							"/* 8. Проверить, что name в ответе равно name s request (name забрать из request.)*/\r",
							"let req_name = req.name;\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"        pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"/*9. Проверить, что age в ответе равно age s request (age забрать из request.)*/\r",
							"let req_age = req.age;\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"        pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"/* 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)*/\r",
							"let req_salary = req.salary;\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"        pm.expect(Number(resp_salary)).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"/* 11. Вывести в консоль параметр family из response.*/\r",
							"let person = jsonData.family;\r",
							"console.log(\"family -- \", person)\r",
							"\r",
							"/*12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)*/\r",
							"let req_salary_1_5 = req_salary * 4;\r",
							"let resp_u_salary_1_5_year = jsonData.family.u_salary_1_5_year;\r",
							"\r",
							"pm.test(\"Salary_4\", function () {\r",
							"        pm.expect(resp_u_salary_1_5_year).to.eql(req_salary_1_5);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Tanya",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*2. Статус код 200*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*3. Спарсить response body в json.*/\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"/*4. Спарсить request.*/\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"/*5. Проверить, что name в ответе равно name s request (name забрать из request.)*/\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"let req_name = req.name;\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"        pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"/*6. Проверить, что age в ответе равно age s request (age забрать из request.)*/\r",
							"let req_age = req.age;\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"        pm.expect(resp_age).to.eql(req_age);\r",
							"});\r",
							"\r",
							"/*7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)*/\r",
							"let resp_salary = jsonData.salary;\r",
							"let req_salary = req.salary;\r",
							"\r",
							"pm.test(\"Salary\", function () {\r",
							"        pm.expect(JSON.stringify(resp_salary)).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"/*8. Вывести в консоль параметр family из response.*/\r",
							"let person = jsonData.family;\r",
							"console.log(\"family -- \", person)\r",
							"\r",
							"/*9. Проверить, что у параметра dog есть параметры name./*/\r",
							"/*/let dog = jsonData.family.pets.dog;\r",
							"\r",
							"pm.test(\"Dogs name\", function () {\r",
							"    pm.expect(dog).to.have.property(\"name\");\r",
							"});*/\r",
							"\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"name\")\r",
							"\r",
							"/*10. Проверить, что у параметра dog есть параметры age.*/\r",
							"/*pm.test(\"Dogs age\", function () {\r",
							"    pm.expect(dog).to.have.property(\"age\");\r",
							"});*/\r",
							"\r",
							"pm.expect(jsonData.family.pets.dog).to.have.property(\"age\")\r",
							"\r",
							"/*11. Проверить, что параметр name имеет значение Luky.*/\r",
							"let dogs_name = jsonData.family.pets.dog.name;\r",
							"pm.test(\"Dogs_name\", function () {\r",
							"        pm.expect(dogs_name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"/*12. Проверить, что параметр age имеет значение 4.*/\r",
							"let dogs_age = jsonData.family.pets.dog.age;\r",
							"pm.test(\"Dogs_age\", function () {\r",
							"        pm.expect(dogs_age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Tanya&age=38&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*2. Статус код 200*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*3. Спарсить response body в json.*/\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"/*4. Спарсить request.*/\r",
							"let req = pm.request.url.query.toObject();\r",
							"\r",
							"/*5. Проверить, что name в ответе равно name s request (name забрать из request.)*/\r",
							"let jsonData = pm.response.json();\r",
							"let resp_name = jsonData.name;\r",
							"let req_name = req.name;\r",
							"\r",
							"pm.test(\"Name\", function () {\r",
							"        pm.expect(resp_name).to.eql(req_name);\r",
							"});\r",
							"\r",
							"/*6. Проверить, что age в ответе равно age из request (age забрать из request.)*/\r",
							"let req_age = req.age;\r",
							"let resp_age = jsonData.age;\r",
							"\r",
							"pm.test(\"Age\", function () {\r",
							"        pm.expect(Number(resp_age)).to.eql(Number(req_age));\r",
							"});\r",
							"\r",
							"/*7. Вывести в консоль параметр salary из request.*/\r",
							"let req_salary = req.salary;\r",
							"console.log(req_salary);\r",
							"\r",
							"/*8. Вывести в консоль параметр salary из response.*/\r",
							"let resp_salary = jsonData.salary;\r",
							"console.log(resp_salary);\r",
							"\r",
							"/*9. Вывести в консоль 0-й элемент параметра salary из response.*/\r",
							"console.log(resp_salary[0]);\r",
							"\r",
							"/*10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.*/\r",
							"console.log(resp_salary[1]);\r",
							"\r",
							"/*11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.*/\r",
							"console.log(resp_salary[2]);\r",
							"\r",
							"/*12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)*/\r",
							"pm.test(\"Salary\", function () {\r",
							"        pm.expect(Number(resp_salary[0])).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"/*13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)*/\r",
							"pm.test(\"Salary2\", function () {\r",
							"        pm.expect(Number(resp_salary[1])).to.eql(Number(req_salary*2));\r",
							"});\r",
							"\r",
							"/*14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)*/\r",
							"pm.test(\"Salary3\", function () {\r",
							"        pm.expect(Number(resp_salary[2])).to.eql(Number(req_salary*3));\r",
							"});\r",
							"\r",
							"pm.environment.set(\"name\", req.name);\r",
							"pm.environment.set(\"age\", req.age);\r",
							"pm.environment.set(\"salary\", req.salary);\r",
							"\r",
							"/*21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.*/\r",
							"for (var i = 0; i < jsonData.salary.length; i++) {\r",
							"    console.log (\"response_salary\" , i , \" is \", jsonData.salary[i]);\r",
							"}\r",
							"\r",
							"for (let i=0; i < jsonData.salary.length; i++) {\r",
							"    console.log(jsonData.salary[i])\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Tanya&age=38&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Tanya"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"/*5. Статус код 200*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"/*6. Спарсить response body в json.*/\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"/*7. Спарсить request.*/\r",
							"let req = request.data;\r",
							"\r",
							"/*8. Проверить, что json response имеет параметр start_qa_salary*/\r",
							"pm.test(\"json response\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"/*9. Проверить, что json response имеет параметр qa_salary_after_6_months*/\r",
							"pm.test(\"json response 6 months\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"/*10. Проверить, что json response имеет параметр qa_salary_after_12_months*/\r",
							"pm.test(\"json response 12 months\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"/*11. Проверить, что json response имеет параметр qa_salary_after_1.5_year*/\r",
							"pm.test(\"json response 1.5 year\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"/*12. Проверить, что json response имеет параметр qa_salary_after_3.5_years*/\r",
							"pm.test(\"json response 3.5 year\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"/*13. Проверить, что json response имеет параметр person*/\r",
							"pm.test(\"json response1\", function () {\r",
							"    pm.expect(responseJson).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"/*14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)*/\r",
							"let jsonData = pm.response.json();\r",
							"let req_salary = req.salary;\r",
							"let resp_start_qa_salary = jsonData.start_qa_salary\r",
							"pm.test(\"Salary\", function () {\r",
							"        pm.expect(Number(resp_start_qa_salary)).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"/*15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)*/\r",
							"let resp_qa_salary_after_6_months = jsonData.qa_salary_after_6_months\r",
							"pm.test(\"Salary_6\", function () {\r",
							"        pm.expect(resp_qa_salary_after_6_months).to.eql(req_salary*2);\r",
							"});\r",
							"\r",
							"/*16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)*/\r",
							"let resp_qa_salary_after_12_months = jsonData.qa_salary_after_12_months\r",
							"pm.test(\"Salary_12\", function () {\r",
							"        pm.expect(resp_qa_salary_after_12_months).to.eql(req_salary*2.7);\r",
							"});\r",
							"\r",
							"/*17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)*/\r",
							"\r",
							"pm.test(\"Salary_1.5\", function () {\r",
							"        pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(req_salary*3.3);\r",
							"});\r",
							"\r",
							"/*18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)*/\r",
							"pm.test(\"Salary_3.5\", function () {\r",
							"        pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(req_salary*3.8);\r",
							"});\r",
							"\r",
							"/*19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)*/\r",
							"let person = jsonData.person.u_name;\r",
							"pm.test(\"Person\", function () {\r",
							"        pm.expect(Number(person[1])).to.eql(Number(req_salary));\r",
							"});\r",
							"\r",
							"/*20. Проверить, что что параметр u_age равен age из request (age забрать из request.)*/\r",
							"let person_u_age = jsonData.person.u_age;\r",
							"let req_age = req.age;\r",
							"pm.test(\"Person_age\", function () {\r",
							"        pm.expect(Number(person_u_age)).to.eql(Number(req_age));\r",
							"});\r",
							"\r",
							"/*21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)*/\r",
							"let resp_u_salary_5_years = jsonData.person.u_salary_5_years\r",
							"pm.test(\"Salary_5\", function () {\r",
							"        pm.expect(resp_u_salary_5_years).to.eql(req_salary*4.2);\r",
							"});\r",
							"\r",
							"/*22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.*/\r",
							"for (let i in jsonData.person)  {\r",
							"console.log(i, \":\", jsonData.person[i]) \r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "name",
							"value": "",
							"disabled": true
						},
						{
							"key": "age ",
							"value": "",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}